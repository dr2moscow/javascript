'use strict';

/* 1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
d = b++; alert(d);           // 1
c = (2 + ++a); alert(c);      // 5
d = (2 + b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3
Почему код даёт именно такие результаты ?
*/

var a = 1, b = 1, c, d;
c = ++a; alert(`a = ${a}\nc = ++a\nc = ${c}\nпрефиксный инкермент, увеличивает значение (a == 2) на единицу и записывает новое значение: c == 2; a == 2`);           // 2
d = b++; alert(`d = ${d}\nd = b++\nd = ${d}\nпостфиксный инкремент, увеличивает значение (b == 2), но в перменную при присваении переменонй d записывает старое значение переменно b: d == 1; b == 2`);           // 1
c = (2 + ++a); alert(`c= 1\nc = (2 + ++a)\nc = ${c}\nиспользуется префиксный инкремент (a): 2 + (a = a + 1); с == 5; a == 3`);   // 5
d = (2 + b++); alert(`d = 1\nd = (2 + b++)\nd = ${d}\nиспользуется постфискный инкремент (b), b увеличилось на 1, но переменной d присвоили  предыдущие значение b: d == 2 + 2. d== 4; b == 3`);  // 4
alert(`a = ${a}\nИтоговое значение перменной a`);  // 3
alert(`b = ${b}\nИтоговое значение переменной b`);  // 3


/* Инкременты (++) изменяют саму переменную, а не только возвращают значение на единицу больше.
постфиксный - когда оператор идёт после переменной (counter++), присваевает увеличинное значение, но в текущей операции исопльзует старое значение
префиксный - когда оператор идёт перед переменной (++counter), увеличивает значение и сразу использует в текущей операции.
*/